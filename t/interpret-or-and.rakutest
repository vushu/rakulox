use Test;

use lib 'lib';
plan 11;

use RakuLox::LoxGrammar;
use RakuLox::LoxActions;
use RakuLox::LoxInterpreter;

my $actions = LoxActions.new;
my $parser = LoxGrammar.new;
my $interpreter = LoxInterpreter.new;

my $code = q:to/END/;
if (0 == 1 and 0 == 0) {
  print "YAY TRUE Logical node";
}
END

my $ast = $parser.parse($code, :actions($actions)).made;

ok $ast, "Successfully got and AST";

my $result = $interpreter.interpret($ast);

$code = q:to/END/;
if (false or true) {
  print "heheh";
  print "heheh";
  print "heheh";
  print "heheh";
}
END

$ast = $parser.parse($code, :actions($actions)).made;

ok $ast, "Successfully got and AST";

$result = $interpreter.interpret($ast);

$code = q:to/END/;
false or true;
false and true;
true and false;
true or false;
END

$ast = $parser.parse($code, :actions($actions)).made;

ok $ast, "Successfully got and AST";

$result = $interpreter.interpret($ast);
ok $result[0], "false or true is true";
ok !$result[1], "false and true is false";
ok !$result[2], "true and false is false";
ok $result[3], "true or false is true";

$code = q:to/END/;
"hej" or false;
nil or "Yes";
"No this" and "but this";
END

$ast = $parser.parse($code, :actions($actions)).made;

ok $ast, "Successfully got and AST";

$result = $interpreter.interpret($ast);
ok $result[0] eq "hej", "should give hej";
ok $result[1] eq "Yes", "should give Yes";
ok $result[2] eq "but this", "should give but this";

done-testing;